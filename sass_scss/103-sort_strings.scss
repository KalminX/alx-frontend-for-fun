/*Using bubble sort to sort an array of words*/
@use "sass:map";
@use "sass:list";
@use "sass:string";
@import "sort_list";
// ASCII Lookup Table
$ascii-map: (
  "a": 97, "b": 98, "c": 99, "d": 100, "e": 101,
  "f": 102, "g": 103, "h": 104, "i": 105, "j": 106,
  "k": 107, "l": 108, "m": 109, "n": 110, "o": 111,
  "p": 112, "q": 113, "r": 114, "s": 115, "t": 116,
  "u": 117, "v": 118, "w": 119, "x": 120, "y": 121, "z": 122,
  "A": 65, "B": 66, "C": 67, "D": 68, "E": 69,
  "F": 70, "G": 71, "H": 72, "I": 73, "J": 74,
  "K": 75, "L": 76, "M": 77, "N": 78, "O": 79,
  "P": 80, "Q": 81, "R": 82, "S": 83, "T": 84,
  "U": 85, "V": 86, "W": 87, "X": 88, "Y": 89, "Z": 90,
  "0": 48, "1": 49, "2": 50, "3": 51, "4": 52,
  "5": 53, "6": 54, "7": 55, "8": 56, "9": 57
);

// Function to get ASCII value of a character
@function ascii-value($char) {
  @return map.get($ascii-map, $char);
}

// Function to compare two words
@function compare-words($word1, $word2) {
  $length1: string.length($word1);
  $length2: string.length($word2);
  $min-length: if($length1 < $length2, $length1, $length2);

  @for $i from 1 through $min-length {
    $char1: string.slice($word1, $i, $i);
    $char2: string.slice($word2, $i, $i);

    @if ascii-value($char1) < ascii-value($char2) {
      @return -1; // $word1 is less than $word2
    } @else if ascii-value($char1) > ascii-value($char2) {
      @return 1; // $word1 is greater than $word2
    }
  }

  // If all characters are equal, shorter word comes first
  @if $length1 < $length2 {
    @return -1;
  } @else if $length1 > $length2 {
    @return 1;
  } @else {
    @return 0; // Both words are equal
  }
}

// Function to set a specific index in a list
@function set-nth($list, $index, $value) {
  $result: ();
  @for $i from 1 through list.length($list) {
    $result: list.append($result, if($i == $index, $value, list.nth($list, $i)));
  }
  @return $result;
}

// Function to sort a list of words
@function sort-words($list) {
  $sorted: $list;
  $list-length: list.length($sorted);

  @for $i from 1 through $list-length {
    @for $j from 1 through max(1, $list-length - $i) {
      $current: list.nth($sorted, $j);
      $next: list.nth($sorted, $j + 1);

      @if compare-words($current, $next) > 0 {
        // Swap words if out of order
        $sorted: set-nth($sorted, $j, $next);
        $sorted: set-nth($sorted, $j + 1, $current);
      }
    }
  }

  @return $sorted;
}

@debug sort-words($list_to_sort);

